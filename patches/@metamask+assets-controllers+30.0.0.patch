diff --git a/node_modules/@metamask/assets-controllers/dist/.patch.txt b/node_modules/@metamask/assets-controllers/dist/.patch.txt
new file mode 100644
index 0000000..b867ea9
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/.patch.txt
@@ -0,0 +1,14 @@
+PATCH GENERATED FROM MetaMask/core branch: patch/mobile-assets-controllers-26
+This patch backports various assets controllers features from the main branch of MetaMask/core
+Steps to update patch:
+* Create a new core branch from: patch/mobile-assets-controllers-26
+* Run "yarn build" in the core monorepo
+* Run "yarn patch:assets <core-directory>" in the mobile repo
+* If you have changes also add them to the branch: patch/mobile-assets-controllers-26
+* Steps to update the assets-controllers version
+* Create a new core branch from the next assets-controllers version
+* Merge the branch patch/mobile-assets-controllers-26
+* Solve the conflicts and review changes accordingly the changelog
+* Run "yarn build" in the core monorepo
+* Run "yarn patch:assets <core-directory>" in the mobile repo
+* If you have changes also add them to the branch: patch/mobile-assets-controllers-26
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-4LY47RPI.mjs b/node_modules/@metamask/assets-controllers/dist/chunk-4LY47RPI.mjs
index b4fa939..b305ee8 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-4LY47RPI.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-4LY47RPI.mjs
@@ -19,7 +19,7 @@ function getDefaultTokenBalancesState() {
     contractBalances: {}
   };
 }
-var _handle, _getERC20BalanceOf, _interval, _tokens, _disabled;
+var _handle, _getERC20BalanceOf, _interval, _tokens, _disabled, _updateInProgress;
 var TokenBalancesController = class extends BaseController {
   /**
    * Construct a Token Balances Controller.
@@ -28,6 +28,7 @@ var TokenBalancesController = class extends BaseController {
    * @param options.interval - Polling interval used to fetch new token balances.
    * @param options.tokens - List of tokens to track balances for.
    * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
+   * @param options.onTokensStateChange - Allows subscribing to token controller state changes.
    * @param options.getERC20BalanceOf - Gets the balance of the given account at the given contract address.
    * @param options.state - Initial state to set on this controller.
    * @param options.messenger - The controller restricted messenger.
@@ -36,6 +37,7 @@ var TokenBalancesController = class extends BaseController {
     interval = DEFAULT_INTERVAL,
     tokens = [],
     disabled = false,
+    onTokensStateChange,
     getERC20BalanceOf,
     messenger,
     state = {}
@@ -54,16 +56,14 @@ var TokenBalancesController = class extends BaseController {
     __privateAdd(this, _interval, void 0);
     __privateAdd(this, _tokens, void 0);
     __privateAdd(this, _disabled, void 0);
+    __privateAdd(this, _updateInProgress, false);
     __privateSet(this, _disabled, disabled);
     __privateSet(this, _interval, interval);
     __privateSet(this, _tokens, tokens);
-    this.messagingSystem.subscribe(
-      "TokensController:stateChange",
-      ({ tokens: newTokens, detectedTokens }) => {
-        __privateSet(this, _tokens, [...newTokens, ...detectedTokens]);
-        this.updateBalances();
-      }
-    );
+    onTokensStateChange(async ({ tokens: newTokens, detectedTokens }) => {
+      __privateSet(this, _tokens, [...newTokens, ...detectedTokens]);
+      await this.updateBalances();
+    });
     __privateSet(this, _getERC20BalanceOf, getERC20BalanceOf);
     this.poll();
   }
@@ -100,28 +100,38 @@ var TokenBalancesController = class extends BaseController {
    * Updates balances for all tokens.
    */
   async updateBalances() {
-    if (__privateGet(this, _disabled)) {
+    if (__privateGet(this, _disabled) || __privateGet(this, _updateInProgress)) {
       return;
     }
+    __privateSet(this, _updateInProgress, true);
     const newContractBalances = {};
-    for (const token of __privateGet(this, _tokens)) {
+    const balancePromises = __privateGet(this, _tokens).map((token) => {
       const { address } = token;
       const { selectedAddress } = this.messagingSystem.call(
         "PreferencesController:getState"
       );
-      try {
-        newContractBalances[address] = toHex(
-          await __privateGet(this, _getERC20BalanceOf).call(this, address, selectedAddress)
-        );
+      return __privateGet(this, _getERC20BalanceOf).call(this, address, selectedAddress).then((balance) => {
+        newContractBalances[address] = toHex(balance);
         token.balanceError = null;
-      } catch (error) {
+      }).catch((error) => {
         newContractBalances[address] = toHex(0);
         token.balanceError = error;
-      }
-    }
+      });
+    });
+    await Promise.all(balancePromises);
     this.update((state) => {
       state.contractBalances = newContractBalances;
     });
+    __privateSet(this, _updateInProgress, false);
+  }
+  /**
+   * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+   * Resets to the default state
+   */
+  reset() {
+    this.update((state) => {
+      state.contractBalances = {};
+    });
   }
 };
 _handle = new WeakMap();
@@ -129,6 +139,7 @@ _getERC20BalanceOf = new WeakMap();
 _interval = new WeakMap();
 _tokens = new WeakMap();
 _disabled = new WeakMap();
+_updateInProgress = new WeakMap();
 var TokenBalancesController_default = TokenBalancesController;
 
 export {
@@ -136,4 +147,4 @@ export {
   TokenBalancesController,
   TokenBalancesController_default
 };
-//# sourceMappingURL=chunk-4LY47RPI.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-ASBEJZFL.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-LAU6ZDZR.js b/node_modules/@metamask/assets-controllers/dist/chunk-LAU6ZDZR.js
index d429be1..49c4230 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-LAU6ZDZR.js
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-LAU6ZDZR.js
@@ -82,7 +82,7 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
       selectedAddress: "",
       chainId: initialChainId,
       ipfsGateway: _controllerutils.IPFS_DEFAULT_GATEWAY_URL,
-      openSeaEnabled: false,
+      displayNftMedia: false,
       useIPFSSubdomains: true,
       isIpfsGatewayEnabled: true
     };
@@ -101,16 +101,16 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
       async ({
         selectedAddress,
         ipfsGateway,
-        openSeaEnabled,
+        displayNftMedia,
         isIpfsGatewayEnabled
       }) => {
         this.configure({
           selectedAddress,
           ipfsGateway,
-          openSeaEnabled,
+          displayNftMedia,
           isIpfsGatewayEnabled
         });
-        const needsUpdateNftMetadata = isIpfsGatewayEnabled && ipfsGateway !== "" || openSeaEnabled;
+        const needsUpdateNftMetadata = isIpfsGatewayEnabled && ipfsGateway !== "" || displayNftMedia;
         if (needsUpdateNftMetadata) {
           const { chainId } = this.config;
           const nfts = this.state.allNfts[selectedAddress]?.[chainId] ?? [];
@@ -189,7 +189,8 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
         name: null,
         description: null,
         image: null,
-        standard: null
+        standard: null,
+        error: "Opensea import error"
       };
     }
     const {
@@ -234,7 +235,12 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
    * @returns Promise resolving to the current NFT name and image.
    */
   async getNftInformationFromTokenURI(contractAddress, tokenId, networkClientId) {
-    const { ipfsGateway, useIPFSSubdomains, isIpfsGatewayEnabled } = this.config;
+    const {
+      ipfsGateway,
+      useIPFSSubdomains,
+      isIpfsGatewayEnabled,
+      displayNftMedia
+    } = this.config;
     const result = await this.getNftURIAndStandard(
       contractAddress,
       tokenId,
@@ -242,6 +248,16 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
     );
     let tokenURI = result[0];
     const standard = result[1];
+    if (!displayNftMedia && !isIpfsGatewayEnabled) {
+      return {
+        image: null,
+        name: null,
+        description: null,
+        standard: standard || null,
+        favorite: false,
+        tokenURI
+      };
+    }
     const hasIpfsTokenURI = tokenURI.startsWith("ipfs://");
     if (hasIpfsTokenURI && !isIpfsGatewayEnabled) {
       return {
@@ -253,8 +269,7 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
         tokenURI: tokenURI ?? null
       };
     }
-    const isDisplayNFTMediaToggleEnabled = this.config.openSeaEnabled;
-    if (!hasIpfsTokenURI && !isDisplayNFTMediaToggleEnabled) {
+    if (!hasIpfsTokenURI && !displayNftMedia) {
       return {
         image: null,
         name: null,
@@ -288,7 +303,8 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
         description: null,
         standard: standard || null,
         favorite: false,
-        tokenURI: tokenURI ?? null
+        tokenURI: tokenURI ?? null,
+        error: "URI import error"
       };
     }
   }
@@ -345,10 +361,21 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
           networkClientId
         )
       ),
-      this.config.openSeaEnabled && chainId === "0x1" ? _controllerutils.safelyExecute.call(void 0, 
+      this.config.displayNftMedia && chainId === "0x1" ? _controllerutils.safelyExecute.call(void 0, 
         () => this.getNftInformationFromApi(contractAddress, tokenId)
       ) : void 0
     ]);
+    if (blockchainMetadata?.error && nftApiMetadata?.error) {
+      return {
+        image: null,
+        name: null,
+        description: null,
+        standard: blockchainMetadata.standard ?? null,
+        favorite: false,
+        tokenURI: blockchainMetadata.tokenURI ?? null,
+        error: "Both import failed"
+      };
+    }
     return {
       ...nftApiMetadata,
       name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,
@@ -472,7 +499,8 @@ var NftController = class extends _basecontroller.BaseControllerV1 {
           symbol: nftContract.symbol,
           tokenId: tokenId.toString(),
           standard: nftMetadata.standard,
-          source
+          source,
+          tokenURI: nftMetadata.tokenURI
         });
       }
       return newNfts;
@@ -1202,4 +1230,4 @@ var NftController_default = NftController;
 
 
 exports.getDefaultNftState = getDefaultNftState; exports.NftController = NftController; exports.NftController_default = NftController_default;
-//# sourceMappingURL=chunk-LAU6ZDZR.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-PTBS4GL6.js.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-MR6EF4B7.mjs b/node_modules/@metamask/assets-controllers/dist/chunk-MR6EF4B7.mjs
index 06df77e..150932e 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-MR6EF4B7.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-MR6EF4B7.mjs
@@ -34,7 +34,7 @@ var STATIC_MAINNET_TOKEN_LIST = Object.entries(
   };
 }, {});
 var controllerName = "TokenDetectionController";
-var _intervalId, _selectedAddress, _networkClientId, _tokenList, _disabled, _isUnlocked, _isDetectionEnabledFromPreferences, _isDetectionEnabledForNetwork, _getBalancesInSingleCall, _trackMetaMetricsEvent, _registerEventListeners, registerEventListeners_fn, _stopPolling, stopPolling_fn, _startPolling, startPolling_fn, _getCorrectChainIdAndNetworkClientId, getCorrectChainIdAndNetworkClientId_fn, _restartTokenDetection, restartTokenDetection_fn, _getSlicesOfTokensToDetect, getSlicesOfTokensToDetect_fn, _addDetectedTokens, addDetectedTokens_fn;
+var _intervalId, _selectedAddress, _networkClientId, _tokenList, _disabled, _isUnlocked, _isDetectionEnabledFromPreferences, _isDetectionEnabledForNetwork, _getBalancesInSingleCall, _getTokensState, _trackMetaMetricsEvent, _registerEventListeners, registerEventListeners_fn, _stopPolling, stopPolling_fn, _startPolling, startPolling_fn, _getCorrectChainIdAndNetworkClientId, getCorrectChainIdAndNetworkClientId_fn, _restartTokenDetection, restartTokenDetection_fn, _getSlicesOfTokensToDetect, getSlicesOfTokensToDetect_fn, _addDetectedTokens, addDetectedTokens_fn;
 var TokenDetectionController = class extends StaticIntervalPollingController {
   /**
    * Creates a TokenDetectionController instance.
@@ -52,6 +52,7 @@ var TokenDetectionController = class extends StaticIntervalPollingController {
     interval = DEFAULT_INTERVAL,
     disabled = true,
     getBalancesInSingleCall,
+    getTokensState,
     trackMetaMetricsEvent,
     messenger
   }) {
@@ -91,6 +92,7 @@ var TokenDetectionController = class extends StaticIntervalPollingController {
     __privateAdd(this, _isDetectionEnabledFromPreferences, void 0);
     __privateAdd(this, _isDetectionEnabledForNetwork, void 0);
     __privateAdd(this, _getBalancesInSingleCall, void 0);
+    __privateAdd(this, _getTokensState, void 0);
     __privateAdd(this, _trackMetaMetricsEvent, void 0);
     __privateSet(this, _disabled, disabled);
     this.setIntervalLength(interval);
@@ -101,6 +103,7 @@ var TokenDetectionController = class extends StaticIntervalPollingController {
     __privateSet(this, _isDetectionEnabledFromPreferences, defaultUseTokenDetection);
     __privateSet(this, _isDetectionEnabledForNetwork, isTokenDetectionSupportedForNetwork(chainId));
     __privateSet(this, _getBalancesInSingleCall, getBalancesInSingleCall);
+    __privateSet(this, _getTokensState, getTokensState);
     __privateSet(this, _trackMetaMetricsEvent, trackMetaMetricsEvent);
     const { isUnlocked } = this.messagingSystem.call(
       "KeyringController:getState"
@@ -202,6 +205,7 @@ _isUnlocked = new WeakMap();
 _isDetectionEnabledFromPreferences = new WeakMap();
 _isDetectionEnabledForNetwork = new WeakMap();
 _getBalancesInSingleCall = new WeakMap();
+_getTokensState = new WeakMap();
 _trackMetaMetricsEvent = new WeakMap();
 _registerEventListeners = new WeakSet();
 registerEventListeners_fn = function() {
@@ -324,7 +328,7 @@ getSlicesOfTokensToDetect_fn = function({
   chainId,
   selectedAddress
 }) {
-  const { allTokens, allDetectedTokens, allIgnoredTokens } = this.messagingSystem.call("TokensController:getState");
+  const { allTokens, allDetectedTokens, allIgnoredTokens } = __privateGet(this, _getTokensState).call(this);
   const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [
     allTokens,
     allDetectedTokens,
@@ -408,4 +412,4 @@ export {
   TokenDetectionController,
   TokenDetectionController_default
 };
-//# sourceMappingURL=chunk-MR6EF4B7.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-VGIPTYXN.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/chunk-PAJTKWEC.mjs b/node_modules/@metamask/assets-controllers/dist/chunk-PAJTKWEC.mjs
index 58047d9..f1290a8 100644
--- a/node_modules/@metamask/assets-controllers/dist/chunk-PAJTKWEC.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/chunk-PAJTKWEC.mjs
@@ -80,9 +80,8 @@ var AccountTrackerController = class extends StaticIntervalPollingControllerV1 {
             [chainId]: accountsForChain
           }
         });
-      } catch (err) {
+      } finally {
         releaseLock();
-        throw err;
       }
     };
     this.defaultConfig = {
@@ -243,4 +242,4 @@ export {
   AccountTrackerController,
   AccountTrackerController_default
 };
-//# sourceMappingURL=chunk-PAJTKWEC.mjs.map
\ No newline at end of file
+//# sourceMappingURL=chunk-ZUICS5OS.mjs.map
\ No newline at end of file
