diff --git a/node_modules/react-native-webview/android/gradle.properties b/node_modules/react-native-webview/android/gradle.properties
index 6882a0a..2829781 100644
--- a/node_modules/react-native-webview/android/gradle.properties
+++ b/node_modules/react-native-webview/android/gradle.properties
@@ -1,4 +1,4 @@
-ReactNativeWebView_kotlinVersion=1.3.50
+ReactNativeWebView_kotlinVersion=1.7.0
 ReactNativeWebView_webkitVersion=1.4.0
 ReactNativeWebView_compileSdkVersion=29
 ReactNativeWebView_buildToolsVersion=29.0.3
diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/CustomCookieJar.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/CustomCookieJar.java
new file mode 100644
index 0000000..f4a6af9
--- /dev/null
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/CustomCookieJar.java
@@ -0,0 +1,78 @@
+package com.reactnativecommunity.webview;
+import android.util.Log;
+import android.webkit.CookieManager;
+import android.webkit.ValueCallback;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import okhttp3.Cookie;
+import okhttp3.CookieJar;
+import okhttp3.HttpUrl;
+
+class CustomCookieJar implements CookieJar {
+  private Worker worker;
+  private CookieManager cookieManager;
+
+  public CustomCookieJar() {
+    worker = new Worker();
+    cookieManager = this.getCookieManager();
+  }
+
+  private CookieManager getCookieManager() {
+    CookieManager cookieManager = CookieManager.getInstance();
+    cookieManager.setAcceptCookie(true);
+    return cookieManager;
+  }
+
+  @Override
+  public void saveFromResponse(HttpUrl url, List<Cookie> cookies) {
+      worker.execute(() -> {
+        try {
+
+          for (Cookie cookie : cookies) {
+            String _url = url.toString();
+            String _cookie = cookie.toString();
+            cookieManager.setCookie(_url, _cookie, new ValueCallback<Boolean>() {
+              @Override
+              public void onReceiveValue(Boolean value) {}
+            });
+            cookieManager.flush();
+          }
+        } catch (Exception e) {
+          e.printStackTrace();
+        }
+      });
+  }
+
+  @Override
+  public List<Cookie> loadForRequest(HttpUrl httpUrl) {
+    List<Cookie> cookieList = new ArrayList<Cookie>();
+    try {
+
+      if (cookieManager.hasCookies()) {
+        String response = cookieManager.getCookie(httpUrl.toString());
+
+        if (response != null) {
+          String[] browserCookies = response.split(";");
+
+          for (String cookieStr : browserCookies) {
+            Cookie cookie = Cookie.parse(httpUrl, cookieStr);
+            if (cookie == null) {
+              continue;
+            }
+            cookieList.add(cookie);
+          }
+        }
+
+      }
+      return cookieList;
+    } catch (Exception e) {
+      e.printStackTrace();
+      return cookieList;
+    }
+  }
+}
